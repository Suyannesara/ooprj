POO
- Encapsulamento(non-required)
- Heranca
- Polimorfismo

// Alterar os valores das variaveis somente dentro das classes
// GETTERS and SETTERS



class Forma {
    private comprimento;
    private coordenadas = [(x, y), ()];

    // entende-se o metodo criarForma() como o __init__, ou seja, será executado na criação de um instância


    public set definirComprimento(comprimento):
        this.comprimento = comprimento 
    
    public set definirCoordenadas(coordenadas){
        // coordenadas [[x, y]]
        this.coordenadas = coordenadas;
    }
    
}

class Plano {

}

class Linha {
    private ponto_inicial;
    private ponto_final;
    private coordenadas = [];

    // iniciarLinha == __init__
    iniciarLinha(ponto_inicial, ponto_final):
        this.ponto_inicial = ponto_inicial;
        this.ponto_final = ponto_final;
        this.inclinacao_linha ;

        coordenadas = this.calcularCoordenadasIntermediarias()

        // para (coordenada em coordenadas):
        for coordenada in coordenadas:
            escreva(".") where coordenada;

    private calcularCoordenadasIntermediarias():
        // Diferenças nas coordenadas x e y
        diferenca_x = this.ponto_final.x - this.ponto_inicial.x;
        diferenca_y = this.ponto_final.y - this.ponto_inicial.y;

        // Número de pontos intermediários com base nas diferenças
        qtd_pontos_intermediarios = arredondar(diferenca_x)

        // Calcula o passo entre os pontos intermediários
        passo_x = diferenca_x / qtd_pontos_intermediarios
        passo_y = diferenca_y / qtd_pontos_intermediarios

        for i in range(qtd_pontos_intermediarios):
            x = this.ponto_inicial.x + (i * passo_x);
            y = this.ponto_inicial.y + (i * passo_y);
            coordenadas.append({x, y})



    public setInicioLinha(ponto_inicial):
        this.ponto_inicial = ponto_inicial;
    
    public setFimLinha(ponto_final):
        this.ponto_final = ponto_final;

    public getParCoordenadas(tipo):
        if (tipo === 'inicioLinha'):
            return ponto_inicial;
        if (tipo === 'fimLinha'):
            return ponto_final;

        return [ponto_inicial, ponto_final]
}


class Forma {
    private numero_lados;
    private linhas = [];

    iniciarForma(numero_lados, angulos_internos):
        this.numero_lados = numero_lados;

    public setPoligono(ponto_inicial, ponto_final):
        for (lado in this.numero_lados):
            linha = Linha(ponto_inicial, ponto_final);
            
            this.linhas.adiciona(linha); // adiciona == append()
}







class Triangulo extends Linha {
    private 
}

{
    ponto_inicial: {
        x: 0,
        y: 9
    }
}
